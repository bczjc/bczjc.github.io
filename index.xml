<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clarity</title>
    <link>https://www.liaojx.com/</link>
    <description>Recent content on Clarity</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Liaojx; all rights reserved.</copyright>
    <lastBuildDate>Wed, 23 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://www.liaojx.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>新環境的Hugo設置&amp;切換Themes</title>
      <link>https://www.liaojx.com/post/%E8%BD%89%E7%A7%BB%E8%A4%87%E8%A3%BDanaconda%E8%99%9B%E6%93%AC%E7%92%B0%E5%A2%83%E5%88%B0%E5%8F%A6%E4%B8%80%E5%8F%B0%E9%9B%BB%E8%85%A6/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.liaojx.com/post/%E8%BD%89%E7%A7%BB%E8%A4%87%E8%A3%BDanaconda%E8%99%9B%E6%93%AC%E7%92%B0%E5%A2%83%E5%88%B0%E5%8F%A6%E4%B8%80%E5%8F%B0%E9%9B%BB%E8%85%A6/</guid>
      <description>在不同電腦間切換(電腦A到電腦B)，但又希望能有相同的執行環境 這時候就會用到這個功能。
1. 電腦A切換到要轉移的環境 先確認一下虛擬環境名稱 conda env list
conda activate 要複製的環境 如下圖 2. 將該虛擬環境設定匯出到.yml檔 conda env export &amp;gt; 看你想叫什麼.yml 就會在路徑資料夾中生成了，再把此檔存入新電腦。
3. 在電腦B建置新環境 conda env create -f 看你想叫什麼.yml 新的名稱
完成
###==[補充]==
本地端複製一份虛擬環境 使用 conda create -n 複製過來的新名稱 --clone 被複製的名稱
更新電腦的anaconda版本: 執行Anaconda Prompt
 conda update conda conda update anaconda conda update jupyter
 REF: How to clone Python working environment on another machine?[ https://datascience.stackexchange.com/questions/24093/how-to-clone-python-working-environment-on-another-machine?fbclid=IwAR0q3Btb2N7V8DhB0h_qL725SlfnTxP7DYG3ckTMrwbljXDVG6QydYU0UlM]</description>
    </item>
    
    <item>
      <title>[LeetCode] 20. Valid Parentheses</title>
      <link>https://www.liaojx.com/post/20.-valid-parentheses/</link>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.liaojx.com/post/20.-valid-parentheses/</guid>
      <description>&lt;!-- ## [[LeetCode] 20. Valid Parentheses](https://leetcode.com/problems/valid-parentheses/) --&gt;
&lt;p&gt;括號配對問題，字串由三種不同的括號組成，判斷是否合法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Typora &#43; Picgo &#43; Imgur 圖片自動上傳設定 (Windows環境)</title>
      <link>https://www.liaojx.com/post/typora-&#43;-picgo-&#43;-imgur-%E5%9C%96%E7%89%87%E8%87%AA%E5%8B%95%E4%B8%8A%E5%82%B3%E8%A8%AD%E5%AE%9A-windows%E7%92%B0%E5%A2%83/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.liaojx.com/post/typora-&#43;-picgo-&#43;-imgur-%E5%9C%96%E7%89%87%E8%87%AA%E5%8B%95%E4%B8%8A%E5%82%B3%E8%A8%AD%E5%AE%9A-windows%E7%92%B0%E5%A2%83/</guid>
      <description>目標: 在Typora編輯器中，像HackMD可以自動將貼上的圖片上傳至imgur生成url。
以下看中文步驟即可，官網文件供想閱讀原文的人參考。
官方文件: https://support.typora.io/Upload-Image/#validate-image-uploader
Install  Install prebuilt binary of PicGo-Core (Linux / Windows) Typora provide a prebuilt binary of PicGo using nexe to packing the node module into one-file binary. You could just click the “Download” button to install the PicGo binary, and Typora will start downloading and put it under Typora’s support folder directly.
  Location of downloaded PicGo-Core binary The binary will be put under &amp;quot;%AppData/Typora/picgo&amp;quot;, &amp;quot;&amp;quot;%AppData&amp;quot; is &amp;quot;&amp;quot;~/.</description>
    </item>
    
    <item>
      <title>新環境的Hugo設置&amp;切換Themes</title>
      <link>https://www.liaojx.com/post/%E6%96%B0%E7%92%B0%E5%A2%83%E7%9A%84hugo%E8%A8%AD%E7%BD%AE%E5%88%87%E6%8F%9Bthemes/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.liaojx.com/post/%E6%96%B0%E7%92%B0%E5%A2%83%E7%9A%84hugo%E8%A8%AD%E7%BD%AE%E5%88%87%E6%8F%9Bthemes/</guid>
      <description>1. 下載最新的Hugo 下載回來的zip解壓縮，將hugo.exe該資料夾的路徑加到環境變數的path中
在cmd下指令
1hugo version 確認成功。
2. 新主題放入hugo的themes資料夾中 3. 更改config.toml中的theme設定 1theme = &amp;#34; 你想要的參數 &amp;#34; 4. Check 更改完成後，執行以下指令
1hugo server -D 至 http://localhost:1313/ 檢查是否成功
Perfect!</description>
    </item>
    
    <item>
      <title>解決 gitHub Push 多帳號的切換問題</title>
      <link>https://www.liaojx.com/post/git-bash-push-%E5%A4%9A%E5%B8%B3%E8%99%9F%E5%88%87%E6%8F%9B%E5%95%8F%E9%A1%8C/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.liaojx.com/post/git-bash-push-%E5%A4%9A%E5%B8%B3%E8%99%9F%E5%88%87%E6%8F%9B%E5%95%8F%E9%A1%8C/</guid>
      <description>在Windows環境使用git bash進行切換帳號(A-&amp;gt;B)時，上傳後卻發現還是一樣的A帳號，適用以下方法。
[Step1] 開啟電腦裡面的認證管理員(Credential Manager) [Step2] 切換成為Windows認證，找到github.com的認證並移除 [Step3] 未來登入時就會請你再次登入gitHub了。 [Step4] 重新login後，再次push就會是正確的帳號了。 </description>
    </item>
    
    <item>
      <title>Github.io 設定 Google Domain網域</title>
      <link>https://www.liaojx.com/post/github.io-%E8%A8%AD%E5%AE%9A-google-domain%E7%B6%B2%E5%9F%9F/</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.liaojx.com/post/github.io-%E8%A8%AD%E5%AE%9A-google-domain%E7%B6%B2%E5%9F%9F/</guid>
      <description>至domains.google.com選一個喜歡的網域購買，台灣也可以買 (付款時輸入台灣地址即可)
https://domains.google.com/
  github.io -&amp;gt; setting -&amp;gt; Custom domain輸入買好的網域
   Save後 確認 resposity會出現一個cname檔案。
  至domain provider中的dns設定(Github.io用下方那4組就對了)
防止日後過期，詳細步驟可以參考: GitHub Docs
  185.199.111.153
  185.199.110.153
  185.199.109.153
  185.199.108.153
  另外新增一組名稱是www、CNAME、指向個人github.io的設定。
設定好如下:
  PowerShell中輸入以下指令 (Winodws無法使用dig的替代用法)，確認work。
1Resolve-DnsName -Name liaojx.com    等候一段時間(十幾分鐘吧)，試試看新購買的網址有沒有成功導向。
  回到 「GitHub Pages -&amp;gt; Custom domain」將「Enforce HTTPS 」給打勾
(這樣網址前面才會有https，也增加被google搜尋的排名)
   Reference:
如何在 Google Domains 購買網域 + Github Page 設定</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.liaojx.com/archives/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.liaojx.com/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>https://www.liaojx.com/draft/markdown-syntax/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.liaojx.com/draft/markdown-syntax/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rich Content</title>
      <link>https://www.liaojx.com/draft/rich-content/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.liaojx.com/draft/rich-content/</guid>
      <description>&lt;p&gt;Hugo ships with several &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/#use-hugo-s-built-in-shortcodes&#34;&gt;Built-in Shortcodes&lt;/a&gt; for rich content, along with a &lt;a href=&#34;https://gohugo.io/about/hugo-and-gdpr/&#34;&gt;Privacy Config&lt;/a&gt; and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Placeholder Text</title>
      <link>https://www.liaojx.com/draft/placeholder-text/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.liaojx.com/draft/placeholder-text/</guid>
      <description>&lt;p&gt;Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Math Typesetting</title>
      <link>https://www.liaojx.com/draft/math-typesetting/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.liaojx.com/draft/math-typesetting/</guid>
      <description>&lt;p&gt;Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emoji Support</title>
      <link>https://www.liaojx.com/draft/emoji-support/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.liaojx.com/draft/emoji-support/</guid>
      <description>&lt;p&gt;Emoji can be enabled in a Hugo project in a number of ways.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://www.liaojx.com/about/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.liaojx.com/about/</guid>
      <description>Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.
Hugo makes use of a variety of open source projects including:
 https://github.</description>
    </item>
    
    <item>
      <title>HackerRank 程式練習</title>
      <link>https://www.liaojx.com/hackerrank/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.liaojx.com/hackerrank/</guid>
      <description>HacjerRank: https://www.hackerrank.com/</description>
    </item>
    
    <item>
      <title>LeetCode</title>
      <link>https://www.liaojx.com/leetcode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.liaojx.com/leetcode/</guid>
      <description>104. Maximum Depth of Binary Tree</description>
    </item>
    
    <item>
      <title>建置 Anaconda &#43; VSCode 環境來寫Python</title>
      <link>https://www.liaojx.com/post/%E5%BB%BA%E7%BD%AE-anaconda-&#43;-vscode-%E7%92%B0%E5%A2%83%E4%BE%86%E5%AF%ABpython/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.liaojx.com/post/%E5%BB%BA%E7%BD%AE-anaconda-&#43;-vscode-%E7%92%B0%E5%A2%83%E4%BE%86%E5%AF%ABpython/</guid>
      <description>一般寫python有兩種環境建置的方法:1.下載原生的python官方檔案
 下載Anaconda 一般大部分的新手或身邊的朋友好像都是用後者，很方便的是容易建置虛擬環境，並且預先整合了許多套件。  1. 至官網下載安裝最新版的Anaconda 打開後如下的畫面，表示安裝成功。 2. 為專案建置虛擬環境、安裝套件 接著我們先來為測試的專案建一個虛擬環境， 這是Anaconda的優勢所在，可以讓我們很容易進行套件的安裝管理。(也可以利用command line的方式來執行，自行參考下方網路教學) 因為每次進行不同的專案可能會利用到各種不同的套件， 這邊建置虛擬環境就是建置一個專屬於該專案的套件環境， 如此不同的專案就可以同時在電腦中使用不同的版本或各自有特定種類的套件。 可以選擇想要的python版本。 上面的選單切成Not installed，順便update index更新最新的套件目錄以供待會查詢。 接著就自行看要裝什麼套件吧!
也可以按那個綠色箭頭，開啟該環境的cmd.exe 用輸入指令的方式下載 可以在這兩個地方先找找看有沒有你要的套件和版本
 https://anaconda.org/conda-forge/repo https://pypi.org/ 像這樣指定套件和想要的版本(版本省略就是下載最新的)  1pip install opencv-contrib-python==3.4.2.17 可以用
1pip list 查看已安裝的套件清單和版本 輸入
1conda env list 可以查看目前建置的虛擬環境清單 會和在anaconda上一致 接著輸入
1activate 要切換過去的套件名稱 就會切過去囉 (路徑前面的括號內就是環境名稱)
到此虛擬環境建置完成。
 Ref:
Anaconda環境相關 https://s12121296.wordpress.com/2020/03/29/anaconda%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE-%E5%A5%97%E4%BB%B6%E5%AE%89%E8%A3%9D-%E7%92%B0%E5%A2%83%E5%82%99%E4%BB%BD-%E7%92%B0%E5%A2%83%E5%BE%A9%E5%8E%9F-%E5%AE%8C%E6%95%B4%E6%95%99%E5%AD%B8-windows/comment-page-1/
Python環境相關 https://docs.python.org/zh-tw/3/tutorial/venv.html</description>
    </item>
    
  </channel>
</rss>
